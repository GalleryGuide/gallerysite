<?php

use Drupal\Core\Link;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_taxonomy_term_artists_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Redirect to the term view page after editing.
  $form['actions']['submit']['#submit'][] = 'gallerysite_term_submit';

  // Remove votes open/closed.
  $form['field_rating']['#access'] = FALSE;

  // Remove relations section.
  $form['relations']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_taxonomy_term_tags_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Redirect to the term view page after editing.
  $form['actions']['submit']['#submit'][] = 'gallerysite_term_submit';
}

/**
 * Submit handler for taxonomy terms.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function gallerysite_term_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Redirect to the term view page after editing.
  $tid = $form['tid']['#value'];
  $form_state->setRedirect('entity.taxonomy_term.canonical', ['taxonomy_term' => $tid]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['artists']['widget']['add_more']['#value'] = t('Add another artist');
  $form['tags']['widget']['add_more']['#value'] = t('Add another tag');
  
  // Remove revision log fields
  $form['revision_information']['#access'] = FALSE;

  // Remove preview functionality.
  $form['actions']['preview']['#access'] = FALSE;

  // Remove votes open/closed.
  $form['field_rating']['#access'] = FALSE;
  
  // Restrict access to metatag.
  $form['field_metatags']['#access'] = \Drupal::currentUser()->hasPermission('administer meta tags');

  // Add a class if the address has no default value.
  if (!empty($form['field_address']) && empty($form['field_address']['widget'][0]['address']['#default_value']['locality'])) {
    $form['field_address']['#attributes']['class'][] = 'field--widget-address-blank';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_node_gallery_delete_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // TODO: Prevent deletion if the gallery has any exhibitions.

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_contact_message_contact_us_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Remove preview option from contact form.
  $form['actions']['preview']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide the content form options.
  $form['contact']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gallerysite_form_user_register_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide the content form options.
  $form['contact']['#access'] = FALSE;
  
  $link_options = ['absolute' => TRUE];

  $terms_nid = 6345;
  $terms_link = Link::createFromRoute('Terms and Conditions', 'entity.node.canonical', ['node' => $terms_nid], $link_options);

  $privacy_nid = 6343;
  $privacy_link = Link::createFromRoute('Privacy Policy', 'entity.node.canonical', ['node' => $privacy_nid], $link_options);

  $form['terms']['#markup'] = '<p>By creating an account you agree to the ' . $terms_link->toString() . ' and ' . $privacy_link->toString() . '.</p>';
}

function gallerysite_default_image() {

  $connection = Database::getConnection();
  
  $query = $connection->select('file_managed', 'fm')
    ->condition('uri', 'public://imagefield_default_images/anon_large.gif')
    ->fields('fm', array('fid', 'uuid'))
    ->execute();
  
//  $connection->update('file_managed', 'fm')
//    ->condition('fid')

  
}

/**
 * Implements hook_cron().
 */
function gallerysite_cron() {
  // Get all promoted exhibitions which have already finished.
  $date = date('Y-m-d', REQUEST_TIME);
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'exhibition')
    ->condition('status', 1)
    ->condition('promote', 1)
    ->condition('field_date_to.value', $date, '<');
  
  $nids = $query->execute();
  
  // Unpromote the nodes.
  $nodes = \Drupal\node\Entity\Node::loadMultiple($nids);
  foreach ($nodes as $node) {
    $node->set('promote', 0);
    $node->save();
  }
  
  // Truncate tables that grow too large.
  $connection = \Drupal::database();
  $tables = array(
    'cache_render', 
    'cache_dynamic_page_cache',
  );
  foreach ($tables as $table) {
    $connection->delete($table)->execute();
  }
}

/**
 * Implements hook_views_query_alter().
 */
function views_natural_sort_views_query_alter($view, $query) {
  // make sure we're altering the correct view
  $view_id = $view->storage->get('id');
  if (($view_id == 'galleries_a_z' || $view_id == 'exhibitions_a_z') && $view->current_display == 'page_1') {
    $definition = [
      'table' => 'views_natural_sort',
      'field' => 'eid',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
    ];
    $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
    $query->addRelationship('views_natural_sort', $join, 'views_natural_sort');

    // foreach top level condition group
    foreach ($query->where as &$condition_group) {
      // call helper function to recursively alter conditions
      _recursively_alter_query_conditions($condition_group['conditions']);
    }
  }
}

/**
 * Helper function to loop through query conditions.
 */
function _recursively_alter_query_conditions(&$conditions) {
  // foreach condition in condition group
  foreach ($conditions as &$condition) {
    // if condition is itself a condition group
    if (isset($condition['field']) && is_a($condition['field'], 'Drupal\Core\Database\Query\Condition')) {
      // call the helper function on it
      _recursively_alter_query_conditions($condition['field']->conditions());
    }
    else {
      // check if we want to alter the condition and if so alter it
      _alter_query_condition($condition);
    }
  }
}

/**
 * Actually alter the condition if relevant.
 */ 
function _alter_query_condition(&$condition) {
  if (isset($condition['field']) && ($condition['field'] === 'SUBSTRING(node_field_data.title, 1, 1) = :node_field_data_title')) {
    $condition['field'] = "SUBSTRING(views_natural_sort.content, 1, 1) = :node_field_data_title";
  }
}
